---
interface Props {
  placeholder?: string;
  value?: string;
  name?: string;
  id?: string;
  required?: boolean;
  disabled?: boolean;
  readonly?: boolean;
  rows?: number;
  cols?: number;
  resize?: 'none' | 'both' | 'horizontal' | 'vertical';
  class?: string;
  size?: 'sm' | 'md' | 'lg';
  variant?: 'default' | 'error' | 'success';
  maxlength?: number;
  minlength?: number;
  'aria-label'?: string;
  'aria-describedby'?: string;
}

const {
  placeholder = '',
  value = '',
  name,
  id,
  required = false,
  disabled = false,
  readonly = false,
  rows = 4,
  cols,
  resize = 'vertical',
  class: className = '',
  size = 'md',
  variant = 'default',
  maxlength,
  minlength,
  'aria-label': ariaLabel,
  'aria-describedby': ariaDescribedby,
  ...rest
} = Astro.props;

const baseClasses = 'textarea';
const sizeClasses = {
  sm: 'textarea-sm',
  md: 'textarea-md',
  lg: 'textarea-lg'
};

const variantClasses = {
  default: '',
  error: 'textarea-error',
  success: 'textarea-success'
};

const resizeClasses = {
  none: 'resize-none',
  both: 'resize-both',
  horizontal: 'resize-horizontal',
  vertical: 'resize-vertical'
};

const classes = [
  baseClasses,
  sizeClasses[size],
  variantClasses[variant],
  resizeClasses[resize],
  disabled && 'textarea-disabled',
  readonly && 'textarea-readonly',
  className
].filter(Boolean).join(' ');
---

<textarea
  class={classes}
  placeholder={placeholder}
  name={name}
  id={id}
  required={required}
  disabled={disabled}
  readonly={readonly}
  rows={rows}
  cols={cols}
  maxlength={maxlength}
  minlength={minlength}
  aria-label={ariaLabel}
  aria-describedby={ariaDescribedby}
  {...rest}
>{value}</textarea>

<style>
  /* Base Textarea Styles */
  .textarea {
    width: 100%;
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
    background: var(--color-background-secondary);
    color: var(--color-text-primary);
    font-family: inherit;
    font-size: 14px;
    line-height: 1.5;
    transition: all var(--duration-fast) var(--ease-out);
    outline: none;
    resize: vertical;
  }

  .textarea:focus {
    border-color: var(--color-primary-blue);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .textarea::placeholder {
    color: var(--color-text-tertiary);
  }

  /* Size Variants */
  .textarea-sm {
    padding: var(--space-2) var(--space-3);
    font-size: 13px;
    min-height: 80px;
  }

  .textarea-md {
    padding: var(--space-3) var(--space-4);
    font-size: 14px;
    min-height: 100px;
  }

  .textarea-lg {
    padding: var(--space-4) var(--space-5);
    font-size: 16px;
    min-height: 120px;
  }

  /* State Variants */
  .textarea-error {
    border-color: var(--color-accent-red);
  }

  .textarea-error:focus {
    border-color: var(--color-accent-red);
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
  }

  .textarea-success {
    border-color: var(--color-accent-green);
  }

  .textarea-success:focus {
    border-color: var(--color-accent-green);
    box-shadow: 0 0 0 3px rgba(34, 197, 94, 0.1);
  }

  .textarea-disabled {
    opacity: 0.6;
    cursor: not-allowed;
    background: var(--color-background-tertiary);
  }

  .textarea-readonly {
    background: var(--color-background-tertiary);
    cursor: default;
  }

  /* Resize Options */
  .resize-none {
    resize: none;
  }

  .resize-both {
    resize: both;
  }

  .resize-horizontal {
    resize: horizontal;
  }

  .resize-vertical {
    resize: vertical;
  }

  /* Dark Mode Adjustments */
  [data-theme="dark"] .textarea {
    background: var(--color-background-tertiary);
    border-color: var(--color-border);
  }

  [data-theme="dark"] .textarea:focus {
    background: var(--color-background-secondary);
  }

  /* Focus States */
  .textarea:focus-visible {
    outline: 2px solid var(--color-primary-blue);
    outline-offset: 2px;
  }

  .textarea-error:focus-visible {
    outline-color: var(--color-accent-red);
  }

  .textarea-success:focus-visible {
    outline-color: var(--color-accent-green);
  }

  /* Reduced Motion */
  @media (prefers-reduced-motion: reduce) {
    .textarea {
      transition: none;
    }
  }

  /* Scrollbar Styling */
  .textarea::-webkit-scrollbar {
    width: 8px;
  }

  .textarea::-webkit-scrollbar-track {
    background: var(--color-background-tertiary);
    border-radius: 4px;
  }

  .textarea::-webkit-scrollbar-thumb {
    background: var(--color-border);
    border-radius: 4px;
  }

  .textarea::-webkit-scrollbar-thumb:hover {
    background: var(--color-text-secondary);
  }
</style>