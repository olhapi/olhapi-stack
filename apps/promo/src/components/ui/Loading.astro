---
import { Loader2 } from '@lucide/astro';

interface Props {
  size?: 'sm' | 'md' | 'lg' | 'xl';
  variant?: 'spinner' | 'dots' | 'pulse';
  color?: 'primary' | 'secondary' | 'white' | 'current';
  class?: string;
  text?: string;
  center?: boolean;
}

const {
  size = 'md',
  variant = 'spinner',
  color = 'primary',
  class: className = '',
  text,
  center = false
} = Astro.props;

const baseClasses = 'loading';
const sizeClasses = {
  sm: 'loading-sm',
  md: 'loading-md',
  lg: 'loading-lg',
  xl: 'loading-xl'
};

const colorClasses = {
  primary: 'loading-primary',
  secondary: 'loading-secondary',
  white: 'loading-white',
  current: 'loading-current'
};

const variantClasses = {
  spinner: 'loading-spinner',
  dots: 'loading-dots',
  pulse: 'loading-pulse'
};

const classes = [
  baseClasses,
  sizeClasses[size],
  colorClasses[color],
  variantClasses[variant],
  center && 'loading-center',
  className
].filter(Boolean).join(' ');
---

<div class={classes} role="status" aria-label={text || 'Loading'}>
  {variant === 'spinner' && (
    <Loader2 class="loading-icon" />
  )}

  {variant === 'dots' && (
    <div class="loading-dots-container">
      <div class="loading-dot"></div>
      <div class="loading-dot"></div>
      <div class="loading-dot"></div>
    </div>
  )}

  {variant === 'pulse' && (
    <div class="loading-pulse-container">
      <div class="loading-pulse-circle"></div>
    </div>
  )}

  {text && (
    <span class="loading-text">{text}</span>
  )}

  <span class="sr-only">{text || 'Loading content, please wait...'}</span>
</div>

<style>
  /* Base Loading Styles */
  .loading {
    display: inline-flex;
    align-items: center;
    gap: var(--space-2);
  }

  .loading-center {
    justify-content: center;
    width: 100%;
  }

  /* Size Variants */
  .loading-sm {
    font-size: 14px;
  }

  .loading-sm .loading-icon {
    width: 16px;
    height: 16px;
  }

  .loading-md {
    font-size: 16px;
  }

  .loading-md .loading-icon {
    width: 20px;
    height: 20px;
  }

  .loading-lg {
    font-size: 18px;
  }

  .loading-lg .loading-icon {
    width: 24px;
    height: 24px;
  }

  .loading-xl {
    font-size: 20px;
  }

  .loading-xl .loading-icon {
    width: 32px;
    height: 32px;
  }

  /* Color Variants */
  .loading-primary {
    color: var(--color-primary-blue);
  }

  .loading-secondary {
    color: var(--color-text-secondary);
  }

  .loading-white {
    color: white;
  }

  .loading-current {
    color: currentColor;
  }

  /* Spinner Animation */
  .loading-spinner .loading-icon {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
      stroke-dashoffset: 31.416;
    }
    50% {
      stroke-dashoffset: 7.854;
    }
    to {
      transform: rotate(360deg);
      stroke-dashoffset: 31.416;
    }
  }

  /* Dots Animation */
  .loading-dots-container {
    display: flex;
    gap: 4px;
  }

  .loading-dot {
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background: currentColor;
    animation: bounce 1.4s ease-in-out infinite both;
  }

  .loading-sm .loading-dot {
    width: 4px;
    height: 4px;
  }

  .loading-lg .loading-dot {
    width: 8px;
    height: 8px;
  }

  .loading-xl .loading-dot {
    width: 10px;
    height: 10px;
  }

  .loading-dot:nth-child(1) {
    animation-delay: -0.32s;
  }

  .loading-dot:nth-child(2) {
    animation-delay: -0.16s;
  }

  @keyframes bounce {
    0%, 80%, 100% {
      transform: scale(0);
    }
    40% {
      transform: scale(1);
    }
  }

  /* Pulse Animation */
  .loading-pulse-container {
    position: relative;
  }

  .loading-pulse-circle {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: currentColor;
    animation: pulse 2s ease-in-out infinite;
  }

  .loading-sm .loading-pulse-circle {
    width: 16px;
    height: 16px;
  }

  .loading-lg .loading-pulse-circle {
    width: 24px;
    height: 24px;
  }

  .loading-xl .loading-pulse-circle {
    width: 32px;
    height: 32px;
  }

  @keyframes pulse {
    0% {
      transform: scale(1);
      opacity: 1;
    }
    50% {
      transform: scale(1.1);
      opacity: 0.7;
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }

  /* Loading Text */
  .loading-text {
    color: var(--color-text-secondary);
    font-weight: 500;
  }

  /* Screen Reader Only */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* Dark Mode Adjustments */
  [data-theme="dark"] .loading-text {
    color: var(--color-text-tertiary);
  }

  /* Reduced Motion */
  @media (prefers-reduced-motion: reduce) {
    .loading-spinner .loading-icon {
      animation: none;
    }

    .loading-dot {
      animation: none;
    }

    .loading-pulse-circle {
      animation: none;
    }

    /* Simple static state for reduced motion */
    .loading-spinner .loading-icon {
      opacity: 0.6;
    }

    .loading-dot {
      opacity: 0.6;
    }

    .loading-pulse-circle {
      opacity: 0.6;
    }
  }

  /* High Contrast Mode */
  @media (prefers-contrast: high) {
    .loading-primary {
      color: var(--color-text-primary);
    }
  }
</style>