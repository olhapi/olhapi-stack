---
import { X } from '@lucide/astro';

interface Props {
  id: string;
  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full';
  class?: string;
  closeOnBackdrop?: boolean;
  closeOnEscape?: boolean;
  title?: string;
  showCloseButton?: boolean;
}

const {
  id,
  size = 'md',
  class: className = '',
  closeOnBackdrop = true,
  closeOnEscape = true,
  title,
  showCloseButton = true
} = Astro.props;

const sizeClasses = {
  sm: 'modal-sm',
  md: 'modal-md',
  lg: 'modal-lg',
  xl: 'modal-xl',
  full: 'modal-full'
};

const modalClasses = [
  'modal',
  sizeClasses[size],
  className
].filter(Boolean).join(' ');
---

<div
  class="modal-backdrop"
  id={id}
  data-modal
  data-close-on-backdrop={closeOnBackdrop}
  data-close-on-escape={closeOnEscape}
  role="dialog"
  aria-modal="true"
  aria-labelledby={title ? `${id}-title` : undefined}
  aria-hidden="true"
>
  <div class={modalClasses} role="document">
    {title && (
      <div class="modal-header">
        <h2 class="modal-title text-heading-medium" id={`${id}-title`}>
          {title}
        </h2>
        {showCloseButton && (
          <button
            type="button"
            class="modal-close"
            data-modal-close
            aria-label="Close modal"
          >
            <X size={24} />
          </button>
        )}
      </div>
    )}

    <div class="modal-body">
      <slot />
    </div>

    <slot name="footer" />
  </div>
</div>

<style>
  /* Modal Backdrop */
  .modal-backdrop {
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--space-4);
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: all var(--duration-normal) var(--ease-out);
  }

  .modal-backdrop[aria-hidden="false"] {
    opacity: 1;
    visibility: visible;
  }

  /* Modal Container */
  .modal {
    background: var(--color-background-primary);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-2xl);
    max-height: 90vh;
    width: 100%;
    display: flex;
    flex-direction: column;
    transform: scale(0.95) translateY(20px);
    transition: transform var(--duration-normal) var(--ease-out);
    border: 1px solid var(--color-border);
  }

  .modal-backdrop[aria-hidden="false"] .modal {
    transform: scale(1) translateY(0);
  }

  /* Size Variants */
  .modal-sm {
    max-width: 400px;
  }

  .modal-md {
    max-width: 500px;
  }

  .modal-lg {
    max-width: 700px;
  }

  .modal-xl {
    max-width: 900px;
  }

  .modal-full {
    max-width: 95vw;
    max-height: 95vh;
  }

  /* Modal Header */
  .modal-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: var(--space-6);
    border-bottom: 1px solid var(--color-border);
    flex-shrink: 0;
  }

  .modal-title {
    margin: 0;
    color: var(--color-text-primary);
  }

  .modal-close {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border: none;
    background: transparent;
    color: var(--color-text-secondary);
    border-radius: var(--radius-md);
    cursor: pointer;
    transition: all var(--duration-fast) var(--ease-out);
  }

  .modal-close:hover {
    background: var(--color-background-secondary);
    color: var(--color-text-primary);
  }

  .modal-close:focus-visible {
    outline: 2px solid var(--color-primary-blue);
    outline-offset: 2px;
  }

  /* Modal Body */
  .modal-body {
    padding: var(--space-6);
    overflow-y: auto;
    flex: 1;
  }

  /* Modal Footer */
  .modal-footer {
    padding: var(--space-6);
    border-top: 1px solid var(--color-border);
    display: flex;
    justify-content: flex-end;
    gap: var(--space-4);
    flex-shrink: 0;
  }

  /* Dark Mode Adjustments */
  [data-theme="dark"] .modal-backdrop {
    background: rgba(0, 0, 0, 0.7);
  }

  [data-theme="dark"] .modal {
    background: var(--color-background-secondary);
    border-color: var(--color-border);
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .modal-backdrop {
      padding: var(--space-2);
    }

    .modal {
      max-height: 95vh;
    }

    .modal-sm,
    .modal-md,
    .modal-lg,
    .modal-xl {
      max-width: 100%;
    }

    .modal-header,
    .modal-body,
    .modal-footer {
      padding: var(--space-4);
    }

    .modal-title {
      font-size: 1.125rem;
    }
  }

  /* Reduced Motion */
  @media (prefers-reduced-motion: reduce) {
    .modal-backdrop,
    .modal,
    .modal-close {
      transition: none;
    }
  }

  /* Accessibility */
  @media (prefers-contrast: high) {
    .modal {
      border-width: 2px;
    }
  }

  /* Prevent body scroll when modal is open */
  body:has(.modal-backdrop[aria-hidden="false"]) {
    overflow: hidden;
  }
</style>

<script>
  // Modal functionality
  class ModalController {
    private modals: Map<string, HTMLElement> = new Map();
    private currentModal: HTMLElement | null = null;
    private lastFocusedElement: HTMLElement | null = null;

    constructor() {
      this.init();
    }

    private init() {
      // Find all modals and register them
      document.querySelectorAll('[data-modal]').forEach(modal => {
        const modalElement = modal as HTMLElement;
        const id = modalElement.id;
        if (id) {
          this.modals.set(id, modalElement);
          this.setupModal(modalElement);
        }
      });

      // Setup global event listeners
      document.addEventListener('click', this.handleClick.bind(this));
      document.addEventListener('keydown', this.handleKeydown.bind(this));
    }

    private setupModal(modal: HTMLElement) {
      const closeButtons = modal.querySelectorAll('[data-modal-close]');
      closeButtons.forEach(button => {
        button.addEventListener('click', () => this.closeModal(modal));
      });

      // Close on backdrop click
      if (modal.dataset.closeOnBackdrop === 'true') {
        modal.addEventListener('click', (e) => {
          if (e.target === modal) {
            this.closeModal(modal);
          }
        });
      }
    }

    private handleClick(e: Event) {
      const target = e.target as HTMLElement;
      const trigger = target.closest('[data-modal-target]') as HTMLElement;

      if (trigger) {
        e.preventDefault();
        const modalId = trigger.dataset.modalTarget;
        if (modalId) {
          this.openModal(modalId);
        }
      }
    }

    private handleKeydown(e: KeyboardEvent) {
      if (e.key === 'Escape' && this.currentModal) {
        const closeOnEscape = this.currentModal.dataset.closeOnEscape === 'true';
        if (closeOnEscape) {
          this.closeModal(this.currentModal);
        }
      }

      // Trap focus inside modal
      if (e.key === 'Tab' && this.currentModal) {
        this.trapFocus(e);
      }
    }

    private trapFocus(e: KeyboardEvent) {
      if (!this.currentModal) return;

      const focusableElements = this.currentModal.querySelectorAll(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      );

      const firstElement = focusableElements[0] as HTMLElement;
      const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;

      if (e.shiftKey) {
        if (document.activeElement === firstElement) {
          e.preventDefault();
          lastElement.focus();
        }
      } else {
        if (document.activeElement === lastElement) {
          e.preventDefault();
          firstElement.focus();
        }
      }
    }

    public openModal(id: string) {
      const modal = this.modals.get(id);
      if (!modal) return;

      // Store currently focused element
      this.lastFocusedElement = document.activeElement as HTMLElement;

      // Close any open modal first
      if (this.currentModal) {
        this.closeModal(this.currentModal);
      }

      this.currentModal = modal;
      modal.setAttribute('aria-hidden', 'false');
      document.body.style.overflow = 'hidden';

      // Focus first focusable element
      setTimeout(() => {
        const firstFocusable = modal.querySelector(
          'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
        ) as HTMLElement;

        if (firstFocusable) {
          firstFocusable.focus();
        }
      }, 100);

      // Dispatch open event
      modal.dispatchEvent(new CustomEvent('modal:open', { detail: { id } }));
    }

    public closeModal(modal: HTMLElement) {
      modal.setAttribute('aria-hidden', 'true');
      document.body.style.overflow = '';
      this.currentModal = null;

      // Restore focus
      if (this.lastFocusedElement) {
        this.lastFocusedElement.focus();
        this.lastFocusedElement = null;
      }

      // Dispatch close event
      const id = modal.id;
      modal.dispatchEvent(new CustomEvent('modal:close', { detail: { id } }));
    }

    public closeCurrentModal() {
      if (this.currentModal) {
        this.closeModal(this.currentModal);
      }
    }
  }

  // Initialize modal controller when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    window.modalController = new ModalController();
  });

  // Global TypeScript declarations
  declare global {
    interface Window {
      modalController: ModalController;
    }
  }
</script>