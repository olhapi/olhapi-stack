---
// Theme Provider component for managing light/dark theme switching
interface Props {
  lang: string;
}

const { lang } = Astro.props;

const translations = {
  en: {
    lightMode: 'Light mode',
    darkMode: 'Dark mode',
    toggleTheme: 'Toggle theme'
  },
  de: {
    lightMode: 'Heller Modus',
    darkMode: 'Dunkler Modus',
    toggleTheme: 'Design umschalten'
  }
};

import { useTranslations } from '../utils/i18n';
import { Sun, Moon } from '@lucide/astro';
const $t = useTranslations(translations, lang);
---

<theme-provider data-theme-provider>
  <button
    type="button"
    class="theme-toggle btn btn-ghost btn-sm"
    aria-label={$t('toggleTheme')}
    data-theme-toggle
  >
    <Sun size={20} class="sun-icon" />
    <Moon size={20} class="moon-icon hidden" />
    <span class="sr-only" data-theme-label>{$t('lightMode')}</span>
  </button>
</theme-provider>

<style>
  .theme-toggle {
    border-radius: var(--radius-full);
    width: 40px;
    height: 40px;
    padding: 0;
    position: relative;
    overflow: hidden;
  }

  .theme-toggle svg {
    transition: all var(--duration-fast) var(--ease-out);
  }

  .theme-toggle:hover {
    transform: scale(1.1);
  }

  [data-theme="dark"] .sun-icon {
    display: none;
  }

  [data-theme="dark"] .moon-icon {
    display: block !important;
  }

  [data-theme="light"] .moon-icon {
    display: none;
  }

  [data-theme="light"] .sun-icon {
    display: block;
  }
</style>

<script>
  class ThemeProvider extends HTMLElement {
    private toggle: HTMLButtonElement | null = null;
    private label: HTMLElement | null = null;
    private currentTheme: string = 'light';

    constructor() {
      super();
    }

    connectedCallback() {
      this.toggle = this.querySelector('[data-theme-toggle]');
      this.label = this.querySelector('[data-theme-label]');

      if (!this.toggle || !this.label) return;

      // Initialize theme from localStorage or system preference
      this.initializeTheme();

      // Add click listener
      this.toggle.addEventListener('click', () => this.toggleTheme());

      // Listen for system theme changes
      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
      mediaQuery.addListener((e) => {
        if (!localStorage.getItem('theme')) {
          this.setTheme(e.matches ? 'dark' : 'light');
        }
      });
    }

    private initializeTheme() {
      // Check localStorage first
      const savedTheme = localStorage.getItem('theme');

      if (savedTheme && (savedTheme === 'light' || savedTheme === 'dark')) {
        this.setTheme(savedTheme);
      } else {
        // Fall back to system preference
        const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        this.setTheme(systemPrefersDark ? 'dark' : 'light');
      }
    }

    private setTheme(theme: 'light' | 'dark') {
      this.currentTheme = theme;

      // Update document attribute
      document.documentElement.setAttribute('data-theme', theme);

      // Update localStorage
      localStorage.setItem('theme', theme);

      // Update button aria-label and screen reader text
      if (this.label) {
        const translations = {
          light: { en: 'Light mode', de: 'Heller Modus' },
          dark: { en: 'Dark mode', de: 'Dunkler Modus' }
        };

        const lang = document.documentElement.lang || 'en';
        const text = translations[theme][lang as keyof typeof translations[typeof theme]] || translations[theme].en;
        this.label.textContent = text;

        if (this.toggle) {
          this.toggle.setAttribute('aria-label', `Switch to ${theme === 'light' ? 'dark' : 'light'} mode`);
        }
      }

      // Dispatch custom event for other components to listen to
      document.dispatchEvent(new CustomEvent('theme-changed', {
        detail: { theme }
      }));
    }

    private toggleTheme() {
      const newTheme = this.currentTheme === 'light' ? 'dark' : 'light';
      this.setTheme(newTheme);
    }
  }

  // Register the custom element
  customElements.define('theme-provider', ThemeProvider);

  // Initialize theme immediately to prevent flash
  (function() {
    const savedTheme = localStorage.getItem('theme');
    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    const theme = savedTheme || (systemPrefersDark ? 'dark' : 'light');
    document.documentElement.setAttribute('data-theme', theme);
  })();
</script>