---
import { useTranslations } from '../utils/i18n';

interface Props {
  lang: string;
}

const { lang } = Astro.props;

const translations = {
  en: {
    title: 'Table of Contents',
  },
  de: {
    title: 'Inhaltsverzeichnis',
  },
};

const $t = useTranslations(translations, lang);
---

<aside class="toc-container">
  <div class="toc-sticky">
    <h3 class="toc-title">{$t('title')}</h3>
    <nav class="toc-nav" id="table-of-contents">
      <!-- Content will be generated by JavaScript -->
    </nav>
  </div>
</aside>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const tocContainer = document.getElementById('table-of-contents');
    const article = document.querySelector('article .prose');

    if (!tocContainer || !article) return;

    // Find all headings in the article
    const headings = article.querySelectorAll('h1, h2, h3, h4, h5, h6');

    if (headings.length === 0) {
      const tocWrapper = document.querySelector('.toc-container');
      if (tocWrapper) tocWrapper.style.display = 'none';
      return;
    }

    // Generate table of contents
    const tocList = document.createElement('ul');
    tocList.className = 'toc-list';

    headings.forEach((heading, index) => {
      // Create an ID for the heading if it doesn't have one
      if (!heading.id) {
        heading.id = `heading-${index}`;
      }

      const level = parseInt(heading.tagName.charAt(1));
      const listItem = document.createElement('li');
      listItem.className = `toc-item toc-level-${level}`;

      const link = document.createElement('a');
      link.href = `#${heading.id}`;
      link.textContent = heading.textContent || '';
      link.className = 'toc-link';

      listItem.appendChild(link);
      tocList.appendChild(listItem);
    });

    tocContainer.appendChild(tocList);

    // Highlight active section on scroll
    function highlightActiveSection() {
      let activeHeading = null;
      const scrollPos = window.scrollY + 100; // Offset for header

      headings.forEach((heading) => {
        const rect = heading.getBoundingClientRect();
        const headingTop = rect.top + window.scrollY;

        if (headingTop <= scrollPos) {
          activeHeading = heading;
        }
      });

      // Remove previous active states
      tocContainer.querySelectorAll('.toc-link').forEach(link => {
        link.classList.remove('active');
      });

      // Add active state to current section
      if (activeHeading) {
        const activeLink = tocContainer.querySelector(`a[href="#${activeHeading.id}"]`);
        if (activeLink) {
          activeLink.classList.add('active');
        }
      }
    }

    // Smooth scroll to heading when clicking TOC links
    tocContainer.addEventListener('click', (e) => {
      if (e.target && e.target.classList.contains('toc-link')) {
        e.preventDefault();
        const targetId = e.target.getAttribute('href')?.substring(1);
        const targetHeading = document.getElementById(targetId);

        if (targetHeading) {
          const headerHeight = 80; // Adjust based on your header height
          const targetPosition = targetHeading.getBoundingClientRect().top + window.scrollY - headerHeight;

          window.scrollTo({
            top: targetPosition,
            behavior: 'smooth'
          });
        }
      }
    });

    // Listen for scroll events
    window.addEventListener('scroll', highlightActiveSection);
    highlightActiveSection(); // Initial call
  });
</script>

<style>
  .toc-container {
    display: none;
  }

  @media (min-width: 1024px) {
    .toc-container {
      display: block;
    }
  }

  .toc-sticky {
    position: sticky;
    top: 6rem;
    max-height: calc(100vh - 8rem);
    overflow-y: auto;
    background-color: white;
    border-radius: 0.5rem;
    padding: 1.5rem;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    border: 1px solid rgb(229, 231, 235);
  }

  [data-theme="dark"] .toc-sticky {
    background-color: rgb(31, 41, 55);
    border-color: rgb(55, 65, 81);
  }

  .toc-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: rgb(17, 24, 39);
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid rgb(229, 231, 235);
  }

  [data-theme="dark"] .toc-title {
    color: white;
    border-bottom-color: rgb(55, 65, 81);
  }

  .toc-list {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .toc-item {
    line-height: 1.25;
  }

  .toc-level-1 {
    margin-left: 0;
  }

  .toc-level-2 {
    margin-left: 1rem;
  }

  .toc-level-3 {
    margin-left: 2rem;
  }

  .toc-level-4 {
    margin-left: 3rem;
  }

  .toc-level-5 {
    margin-left: 4rem;
  }

  .toc-level-6 {
    margin-left: 5rem;
  }

  .toc-link {
    display: block;
    padding: 0.5rem 0.75rem;
    font-size: 0.875rem;
    color: rgb(75, 85, 99);
    border-radius: 0.375rem;
    transition: colors 0.15s ease-in-out;
    border-left: 2px solid transparent;
  }

  [data-theme="dark"] .toc-link {
    color: rgb(156, 163, 175);
  }

  .toc-link:hover {
    color: rgb(37, 99, 235);
    background-color: rgb(239, 246, 255);
  }

  [data-theme="dark"] .toc-link:hover {
    color: rgb(96, 165, 250);
    background-color: rgba(59, 130, 246, 0.1);
  }

  .toc-link.active {
    color: rgb(37, 99, 235);
    background-color: rgb(239, 246, 255);
    border-left-color: rgb(37, 99, 235);
  }

  [data-theme="dark"] .toc-link.active {
    color: rgb(96, 165, 250);
    background-color: rgba(59, 130, 246, 0.1);
    border-left-color: rgb(96, 165, 250);
  }

  /* Custom scrollbar for TOC */
  .toc-sticky::-webkit-scrollbar {
    width: 4px;
  }

  .toc-sticky::-webkit-scrollbar-track {
    background-color: rgb(243, 244, 246);
    border-radius: 9999px;
  }

  [data-theme="dark"] .toc-sticky::-webkit-scrollbar-track {
    background-color: rgb(55, 65, 81);
  }

  .toc-sticky::-webkit-scrollbar-thumb {
    background-color: rgb(209, 213, 219);
    border-radius: 9999px;
  }

  [data-theme="dark"] .toc-sticky::-webkit-scrollbar-thumb {
    background-color: rgb(75, 85, 99);
  }

  .toc-sticky::-webkit-scrollbar-thumb:hover {
    background-color: rgb(156, 163, 175);
  }

  [data-theme="dark"] .toc-sticky::-webkit-scrollbar-thumb:hover {
    background-color: rgb(107, 114, 128);
  }
</style>