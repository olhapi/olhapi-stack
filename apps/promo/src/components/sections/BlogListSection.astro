---
import { Image } from 'astro:assets';
import { getRelativeLocaleUrl } from 'astro:i18n';
import FormattedDate from '../FormattedDate.astro';
import Container from '../ui/Container.astro';
import Card from '../ui/Card.astro';
import Button from '../ui/Button.astro';
import BlogHeroSection from './BlogHeroSection.astro';
import { useTranslations } from '../../utils/i18n';
import type { CollectionEntry } from 'astro:content';
import { ChevronLeft, ChevronRight } from '@lucide/astro';

interface Props {
  lang: string;
  posts?: CollectionEntry<'blog'>[];
  pagination?: {
    currentPage: number;
    lastPage: number;
    url: {
      prev?: string;
      next?: string;
    };
  };
  activeCategory?: string;
}

const { lang, posts = [], pagination, activeCategory } = Astro.props;

const translations = {
  en: {
    noPosts: 'No blog posts found.',
    readMore: 'Read more',
    featured: 'Featured',
    previousPage: 'Previous',
    nextPage: 'Next',
    pageOf: 'Page {current} of {total}',
  },
  de: {
    noPosts: 'Keine Blog-Posts gefunden.',
    readMore: 'Mehr lesen',
    featured: 'Empfohlen',
    previousPage: 'ZurÃ¼ck',
    nextPage: 'Weiter',
    pageOf: 'Seite {current} von {total}',
  },
};

const $t = useTranslations(translations, lang);

// Separate featured posts
const featuredPosts = posts.filter(post => post.data.featured);
const regularPosts = posts.filter(post => !post.data.featured);
---

<!-- Blog Hero Section -->
<BlogHeroSection lang={lang} activeCategory={activeCategory} />

<!-- Main Blog Content -->
<section class="py-16">
  <Container size="lg">
    {posts.length === 0 ? (
      <div class="text-center py-12">
        <p class="text-xl text-gray-600 dark:text-gray-400">{$t('noPosts')}</p>
      </div>
    ) : (
      <>
        <!-- Featured Posts Section -->
        {featuredPosts.length > 0 && (
          <div class="mb-16">
            <div class="flex items-center gap-3 mb-8">
              <div class="w-1 h-8 bg-gradient-to-b from-blue-500 to-indigo-600 rounded-full"></div>
              <h2 class="text-2xl font-bold text-gray-900 dark:text-white">{$t('featured')}</h2>
            </div>
            <div class="grid gap-8 lg:grid-cols-2">
              {featuredPosts.slice(0, 2).map((post) => {
                const slug = post.id.replace(`${lang}/`, '');
                return (
                  <Card
                    variant="elevated"
                    hover={true}
                    padding="none"
                    href={getRelativeLocaleUrl(lang, `blog/${slug}`)}
                    class="overflow-hidden group"
                    data-blog-post
                    data-title={post.data.title}
                    data-description={post.data.description}
                    data-category={post.data.category}
                  >
                    {post.data.heroImage && (
                      <div class="aspect-[16/9] overflow-hidden">
                        <Image
                          src={post.data.heroImage.src}
                          alt={post.data.heroImage.alt || ''}
                          width={600}
                          height={338}
                          class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500"
                        />
                      </div>
                    )}
                    <div class="p-8">
                      <div class="flex items-center gap-2 mb-4">
                        <span class="inline-flex items-center px-3 py-1 text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 rounded-full">
                          {post.data.category}
                        </span>
                        <span class="text-orange-500 font-medium text-sm">{$t('featured')}</span>
                      </div>
                      <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-3 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
                        {post.data.title}
                      </h3>
                      <p class="text-gray-600 dark:text-gray-300 mb-6 line-clamp-3">
                        {post.data.description}
                      </p>
                      <div class="flex items-center justify-between text-sm">
                        <FormattedDate date={post.data.pubDate} />
                        {post.data.readTime && (
                          <span class="text-gray-500 dark:text-gray-400">
                            {post.data.readTime} min read
                          </span>
                        )}
                      </div>
                    </div>
                  </Card>
                );
              })}
            </div>
          </div>
        )}

        <!-- Regular Posts Grid -->
        <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
          {regularPosts.map((post) => {
            const slug = post.id.replace(`${lang}/`, '');
            return (
              <Card
                variant="default"
                hover={true}
                padding="none"
                href={getRelativeLocaleUrl(lang, `blog/${slug}`)}
                class="overflow-hidden group h-full flex flex-col"
                data-blog-post
                data-title={post.data.title}
                data-description={post.data.description}
                data-category={post.data.category}
              >
                {post.data.heroImage && (
                  <div class="aspect-video overflow-hidden">
                    <Image
                      src={post.data.heroImage.src}
                      alt={post.data.heroImage.alt || ''}
                      width={400}
                      height={225}
                      class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500"
                    />
                  </div>
                )}
                <div class="p-6 flex-1 flex flex-col">
                  <div class="flex items-center gap-2 mb-3">
                    <span class="inline-flex items-center px-2 py-1 text-xs font-medium bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300 rounded-full">
                      {post.data.category}
                    </span>
                  </div>
                  <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-3 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors line-clamp-2">
                    {post.data.title}
                  </h3>
                  <p class="text-gray-600 dark:text-gray-300 mb-4 line-clamp-3 flex-1">
                    {post.data.description}
                  </p>
                  <div class="flex items-center justify-between text-sm text-gray-500 dark:text-gray-400 mt-auto">
                    <FormattedDate date={post.data.pubDate} />
                    {post.data.readTime && (
                      <span>{post.data.readTime} min read</span>
                    )}
                  </div>
                </div>
              </Card>
            );
          })}
        </div>

        <!-- Pagination -->
        {pagination && pagination.lastPage > 1 && (
          <div class="flex flex-col items-center mt-16 space-y-6">
            <!-- Page Info -->
            <div class="text-gray-600 dark:text-gray-400 text-center">
              {$t('pageOf', { current: pagination.currentPage, total: pagination.lastPage })}
            </div>

            <!-- Pagination Controls -->
            <div class="flex items-center gap-4">
              {pagination.url.prev && (
                <Button
                  variant="outline"
                  size="lg"
                  href={pagination.url.prev}
                  class="flex items-center gap-2"
                >
                  <ChevronLeft class="w-4 h-4" />
                  {$t('previousPage')}
                </Button>
              )}

              <div class="flex items-center gap-2">
                {Array.from({ length: pagination.lastPage }, (_, i) => i + 1).map(pageNum => {
                  const pageUrl = pageNum === 1
                    ? `/${lang === 'de' ? 'de/' : ''}blog`
                    : `/${lang === 'de' ? 'de/' : ''}blog/page/${pageNum}`;

                  return (
                    <a
                      href={pageUrl}
                      class={`
                        w-10 h-10 flex items-center justify-center rounded-lg font-medium transition-colors
                        ${pageNum === pagination.currentPage
                          ? 'bg-blue-600 text-white'
                          : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
                        }
                      `}
                    >
                      {pageNum}
                    </a>
                  );
                })}
              </div>

              {pagination.url.next && (
                <Button
                  variant="outline"
                  size="lg"
                  href={pagination.url.next}
                  class="flex items-center gap-2"
                >
                  {$t('nextPage')}
                  <ChevronRight class="w-4 h-4" />
                </Button>
              )}
            </div>
          </div>
        )}
      </>
    )}
  </Container>
</section>